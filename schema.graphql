interface Node {
  globalId: ID!
}

type Org {
  computed: String!
  id: ID!
  metrics: OrgMetrics!
  name: String!
}

type OrgMetrics {
  impact: Int!
  signups: OrgMetricsSignups!
}

enum OrgMetricsSignupStatus {
  accepted
  pending
  rejected
}

type OrgMetricsSignups {
  byStatus(status: [OrgMetricsSignupStatus!]!): [OrgMetricsSignupsResult!]!
}

type OrgMetricsSignupsResult {
  count: Int!
  status: OrgMetricsSignupStatus!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  org(id: ID!): Org
  user(id: ID!): User
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

type User implements Node {
  computed: String!
  globalId: ID!
  id: ID!
  name: String!
  org: Org!
}